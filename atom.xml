<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xuan0209.github.io</id>
    <title>伤感小巫神</title>
    <updated>2025-07-05T08:54:56.613Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xuan0209.github.io"/>
    <link rel="self" href="https://xuan0209.github.io/atom.xml"/>
    <subtitle>原神抽卡别歪啊，10连3金缠上我</subtitle>
    <logo>https://xuan0209.github.io/images/avatar.png</logo>
    <icon>https://xuan0209.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, 伤感小巫神</rights>
    <entry>
        <title type="html"><![CDATA[动态数组]]></title>
        <id>https://xuan0209.github.io/post/dong-tai-shu-zu/</id>
        <link href="https://xuan0209.github.io/post/dong-tai-shu-zu/">
        </link>
        <updated>2025-04-19T07:49:48.000Z</updated>
        <content type="html"><![CDATA[<p>vector是一个向量接触到线性代数<br>
向量等同于数组<br>
vector是C++中动态数组的容器<br>
vector&lt;数组类型&gt;例如:vector<int>为int类型的动态数组<br>
C++中vector的实现在一个<vector>头文件中，在代码开头引入这个头文件。<br>
#include <vector><br>
C++ 中直接构造一个vector的语句为:</p>
<pre><code>			vector&lt;T&gt; vec;   
</code></pre>
<p>这样就定义了一个名为vec的储存T类型数据的动态数组。这里的T表示数组要储存的数据类型，它可以是int、double、string、或者其他自定义的数据类型等等。初始的时候vec是空的<br>
C++ 中通过push back()函数在数组最后面插入一个新的元素<br>
获取长度并且访问元素:<br>
C++中通过size()函数获取vector的长度，通过几操作直接访问vector中的元素，下标访问元素的方式和数组是一样的</p>
<p>#include <vector><br>
#include <iostream></p>
<p>using namespace std;</p>
<p>int main0{</p>
<p>vector<int>vec; //初始:[]</p>
<p>vec.push back(1);//当前:[1]</p>
<p>vec.push back(2); //当前:[1,2]<br>
vec.push back(3); // 当前:[1,2, 3]</p>
<p>vec[1] = 3; // 当前:[1, 3, 3]</p>
<p>vec[2]= 2; // 当前:[1,3,2]</p>
<p>for (inti= 0;i&lt; vec.size(); i+ +){</p>
<pre><code>cout &lt;&lt; vec[i] &lt;&lt; endl;
</code></pre>
<p>}<br>
return 0;<br>
}<br>
修改元素:</p>
<pre><code>C++中修改vector中某个元素，只需要用=给它赋值就好，比如vec[1]= 3。
</code></pre>
<p>注意，如果一个vector的长度为 n，现在能直接进行修改的最靠后的元素的下标为 n-1。<br>
例如，当vec的当前长度为6的时候，就不可以直接通过写vec[6]=3这样的方式去给一个尚不存在的元素进行赋值;正确的做法是，继续在最后插入元素:<br>
vec.push back(6);<br>
清空:</p>
<pre><code>C++中都只需要调用clear()函数就可清空vector。
</code></pre>
<p>C++中vector的clear()只是清空vector，并不会释放开辟的内存，用下面的方法可以释放vec的内存:</p>
<pre><code>													// vector&lt;int&gt; vec,vector&lt;int&gt;().swap(vec);
</code></pre>
<p>C++vector函数总结:</p>
<pre><code>	函数		      功能

     push_back		在末尾加入一个元素

     pop_back	        在末尾弹出一个元素
      size	            获取长度	      
      clear                  清空
</code></pre>
<p>用动态数组储存自定义数据<br>
:动态数组不仅仅可以储存基本的数据类型，还能储存自定义数据类型，比如结构体。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表]]></title>
        <id>https://xuan0209.github.io/post/lian-biao/</id>
        <link href="https://xuan0209.github.io/post/lian-biao/">
        </link>
        <updated>2025-03-29T08:03:53.000Z</updated>
        <content type="html"><![CDATA[<p>一.基本概念<br>
1.链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序通过链表中的指针链接次序实现。<br>
2.链表由一系列结点组成，每个结点包含存储数据元素的数据域和存储下一个结点地址的指针域。<br>
二.链表类型<br>
1.单链表：每个结点只包含一个指针域，指向下一个结点。单链表只能表示单向的逻辑关系，如任务列表等。<br>
2.双链表：在单链表的每个结点再增加一个指向前驱结点的指针域，可以更轻松地实现如双向遍历等操作。<br>
3.循环链表：将单链表中终端结点的指针域由空变为指向头结点，使整个链表构成一个环形结构，可从任一结点开始遍历整个链表。<br>
三.链表操作<br>
1.插入：包括头部插入、尾部插入、指定位置插入等。插入时需先找到插入位置的前驱结点，然后修改相关指针指向。<br>
2.删除：有删除头部结点、删除尾部结点、删除指定结点等操作。删除结点时需先找到待删除结点的前驱结点，然后修改前驱结点的指针域，并释放被删除结点的内存空间。<br>
3.查找：按值查找、按位置查找等是常见的查找方式。查找时需从表头开始，逐个比较结点的值或位置，直到找到目标结点或遍历完整个链表。<br>
4.遍历：从表头开始，依次访问每个结点并进行相应操作，直到到达链表末尾。<br>
四.内存管理<br>
1.链表的每个结点通常使用动态内存分配（如new操作符）来创建，因此在删除结点时需使用delete操作符来释放内存，以防止内存泄漏</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[指针]]></title>
        <id>https://xuan0209.github.io/post/zhi-zhen/</id>
        <link href="https://xuan0209.github.io/post/zhi-zhen/">
        </link>
        <updated>2025-03-15T08:46:00.000Z</updated>
        <content type="html"><![CDATA[<p>重点：数组名代表一个指向数组类型的指针常量<br>
一.指针的基本概念:<br>
1.指针是一个变量，用于存储另一个变量的内存地址。通过指针，我们可以访问和操作存储在该内存地址中的数据。<br>
2.指针的大小是固定的，在32位平台上通常是4字节，在64位平台上通常是8字节</p>
<p>二.指针的类型:<br>
1.指针是有类型的，其类型决定了它所指向的变量的类型。例如，int<em>表示指向整数的指针，char</em>表示指向字符的指针。<br>
2.指针类型的大小是固定的，与它所指向的变量类型无关。也就是说，无论是int*、float*还是其他类型的指针，它们在内存中所占用的空间大小都是一样的</p>
<p>三.指针的操作:<br>
1.声明与初始化:<br>
使用<em>号来声明一个指针变量，并使用&amp;号来获取一个变量的地址进行初始化。例如，int <em>ptr; int num = 10; ptr = #<br>
2.解引用:<br>
通过</em>号来访问指针所指向的变量的值。例如，如果ptr是一个指向整数的指针，并且已经初始化为指向某个整数变量num，那么</em>ptr就表示该整数变量的值<br>
3.算术运算:<br>
指针可以进行加法和减法运算，用于移动指针的位置。指针的加减运算是以它所指向的数据类型所占用的字节数为单位进行的。例如，如果ptr是一个指向整的指针			     （	假设整数占4个字节），那么ptr+1就表示将指针向前移动4个字节的位置<br>
四.指针与数组的关系:			     			<br>
1.数组名实际上是一个指向数组首元素的指针常量。因此，可以使用指针来访问数组中的元素<br>
2.可以使用指针遍历数组。例如，对于数组arr和指针ptr（已指向数组首元素），可以通过*(ptr+i)来访问数组中的第i个元素<br>
五.指针与函数的关系:<br>
1.函数的参数可以是指针类型，这样可以在函数内部修改外部变量的值。因为函数参数传递的是值的副本，但如果是指针作为参数，则可以在函数内部通过解引用来修改		     原始变量的值<br>
2.函数也可以返回指针类型的值，返回局部变量的地址是一种常见的用法，但需要注意局部变量的作用域和生命周期问题</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二进制编码]]></title>
        <id>https://xuan0209.github.io/post/er-jin-zhi-bian-ma/</id>
        <link href="https://xuan0209.github.io/post/er-jin-zhi-bian-ma/">
        </link>
        <updated>2025-02-11T08:59:41.000Z</updated>
        <content type="html"><![CDATA[<p>在学习原码，反码和补码之前，需要先了解机器数和真值的概念:<br>
机器数<br>
-个数在计算机中的二进制表示形式，叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为 0，负数为1，称之为 符号位。<br>
真值:<br>
为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值</p>
<p>在探求为何机器要使用 补码 之前,让我们先了解 原码，反码 和 补码 的概念。对于一个数，计算机要使用一定的编码方式进行存储。原码，反码，补码 是机器存储一个具体数字的编码方式</p>
<p>原码：<br>
定义：<br>
1.原码是一种最简单的机器数表示方法，最高位为符号位，正数的符号位为0，负数的符号位为1，其余各位表示数值的绝对值</p>
<p>反码：<br>
定义：<br>
1.正数的反码与原码相同，负数的反码是在原码的基础上，符号位不变，其余各位按位取反<br>
表示方法:<br>
1.正数的 反码 是其本身<br>
2.负数的 反码 是在其 原码 的基础上，符号位不变，其余各个位取反</p>
<p>补码：<br>
定义：<br>
1.正数的补码与原码相同，负数的补码是在其反码的基础上加1<br>
表示方法:<br>
1.正数的 反码 是其本身<br>
2.负数的 反码 是在其 原码 的基础上，符号位不变，其余各个位取</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进制转换]]></title>
        <id>https://xuan0209.github.io/post/jin-zhi-zhuan-huan/</id>
        <link href="https://xuan0209.github.io/post/jin-zhi-zhuan-huan/">
        </link>
        <updated>2025-02-07T09:09:47.000Z</updated>
        <content type="html"><![CDATA[<p>十进制转？进制 短除法： 例如十进制数 52，我们可以用如下的方式计算它的二进制表示:</p>
<pre><code>	2| 52
	  ------
	  2| 26   ..........0
	   ------
	    2| 13   ..........0
	      ------
	      2|  6   ..........1
	       ------
	        2|  3   ..........0
	          ------
	          2|  1   ..........1
	            ------
	            2|  0   ..........1
	             ------
</code></pre>
<p>每次用当前的数除以 2，得出商和余数，将商写在下方，余数写在右方。最后将右方的所有余数倒序排列，(110100)，(我们往往用(.)x的方式来表示 X进制数)就是 52 的二进制表示。</p>
<p>？进制转十进制 按权相加法： 将 X进制转换为十进制的方法相对来说更通用一些，例如，对于(100101),，我们可以用如下的方式进行进制转换:</p>
<p>（100101）2= 1<em>2的五次方 + 0</em>2的四次方 + 0<em>2的三次方 + 1</em>2的二次方 + 0<em>2的一次方 + 1</em>2的零次方</p>
<p>本质上就是算出每个X进制位上的值实际上是多少，累加得出最终的结果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用的数学总结]]></title>
        <id>https://xuan0209.github.io/post/chang-yong-de-shu-xue-zong-jie/</id>
        <link href="https://xuan0209.github.io/post/chang-yong-de-shu-xue-zong-jie/">
        </link>
        <updated>2025-01-15T03:14:12.000Z</updated>
        <content type="html"><![CDATA[<p>在数学函数库中，还有 四舍五入函数 round、上取整函数 ceil 和下取整函数floor，它们都接受一个(双精度)浮点数作为传入的参数。<br>
round(2.75)返回 2.75 四舍五入保留到整数的结果，也就是 3.0;<br>
ceil(-3.2)返回一个大于或等于 -3.2 的整数，也就是 -3.0;</p>
<p>floor(2.7)返回一个小于或等于 2.7 的整数，也就是 2.0。<br>
还有我们学过的 pow(a,b)函数可以求得a的 b次方，请记得，pow 函数的返回值是 double 类型的</p>
<p>sqrt(x) 函数可以求得 x的平方根，返回值也是<br>
double 类型的<br>
fabs(x) 是对于浮点数求绝对值的函数</p>
<p>abs(x) 是对于整数求绝对值的函数</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数学函数]]></title>
        <id>https://xuan0209.github.io/post/shu-xue-han-shu/</id>
        <link href="https://xuan0209.github.io/post/shu-xue-han-shu/">
        </link>
        <updated>2025-01-15T03:12:10.000Z</updated>
        <content type="html"><![CDATA[<p>sizeof  swap  memset不属于数学函数<br>
进行数学运算的函数时，需要添加对应的头文件#include<cmath><br>
在运用pow函数时，按顺序传入有两种double类型的参数，pow函数最终会返回一个（双精度）浮点数作为结果<br>
abs(x)=|x|<br>
(天花板)ceil(x)向上取整<br>
(地板)floor(x)向下取整<br>
sizeof不是数学函数，而是C语言关键字，与for,while和if等类似，数据在计算机当中是以二进制的形式存储的<br>
sizeof(a)是返回a的字节数<br>
memset可以初始化的数是0和-1，memset函数需要头文件<cstring><br>
swap（意思是交换）  swap（x，y）的意思是交换x和y的值</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++中常见的排序方法]]></title>
        <id>https://xuan0209.github.io/post/czhong-chang-jian-de-3-pai-xu-fang-fa/</id>
        <link href="https://xuan0209.github.io/post/czhong-chang-jian-de-3-pai-xu-fang-fa/">
        </link>
        <updated>2025-01-13T04:02:03.000Z</updated>
        <content type="html"><![CDATA[<p>冒泡排序法（稳定）:<br>
例如：3214<br>
第一趟：2134<br>
第二趟：1234<br>
稳定：稳定的是不打乱数的次序</p>
<p>选择排序法(不稳定）:<br>
找到并记住最大的值的位置，和最后一个数交换（或找到并记住最小的值的位置，和第一个数交换）<br>
不稳定的原因：若数中有两个相同的数，会打乱数的位置</p>
<p>插入排序法（稳定）:<br>
定义一个计数器来统计一共输入多少个数<br>
一边输入一边排序，输入的数从后向前来比较大小，找合适的位置插入<br>
有时插入排序法比冒泡排序法和选择排序法效率更高<br>
归并排序:<br>
将大数先分成两半，前半段调用自己并排序，后半段排序，最后将排序好的第一段和第二段合并，合并成排序正确的一二段</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[结构类型]]></title>
        <id>https://xuan0209.github.io/post/jie-gou-lei-xing/</id>
        <link href="https://xuan0209.github.io/post/jie-gou-lei-xing/">
        </link>
        <updated>2025-01-12T03:54:05.000Z</updated>
        <content type="html"><![CDATA[<p>通过一个结构体，我们可以将一系列类型相同或不同的元素放在一起（更直观更简洁）<br>
string name    姓名<br>
int age            年龄<br>
char gender    性别<br>
float height     身高<br>
结构体就是自定义类型，他和int，doule，char这些类型是一样的<br>
persor可以代替int，persor可以当作数组类型，变量类型，等等<br>
在结构体里面能声明若干个<br>
整数数组由整数型变量构成，而结构体数则由结构体变量构成<br>
结构体struct又称为自定义类型，所以他也是一种数据类型<br>
格式（重点）：<br>
struct Persong{</p>
<p>}；<br>
数组不可以整体赋值，但结构体可以进行整体赋值</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序进阶]]></title>
        <id>https://xuan0209.github.io/post/pai-xu-jin-jie/</id>
        <link href="https://xuan0209.github.io/post/pai-xu-jin-jie/">
        </link>
        <updated>2025-01-11T02:43:59.000Z</updated>
        <content type="html"><![CDATA[<p>camp函数（自定义排序总结）:<br>
bool cmp(int a, int b){<br>
if(a%2!=b%2){<br>
return a%2&lt;b%2;<br>
}<br>
if(a%2==1){<br>
return a&lt;b;<br>
}else{<br>
return a&gt;b;<br>
}<br>
结果：先按照奇偶分开，左偶右奇，偶数部分从大到小，奇数部分从小到大</p>
]]></content>
    </entry>
</feed>